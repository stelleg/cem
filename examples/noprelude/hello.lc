#Prelude
Y = \g.(\x.[g x x] \x.[g x x])
= = \n.\m.\t.\f.[m n \n.\m._=]
!= = \n.\m.\t.\f.[m n \n.\m._\=]
>= = \n.\m.\t.\f.[m n \n.\m._>=]
<= = \n.\m.\t.\f.[m n \n.\m._<=]
< = \n.\m.\t.\f.[m n \n.\m._<]
> = \n.\m.\t.\f.[m n \n.\m._>]

+ = \n.\m.[m n \n.\m._+]
- = \n.\m.[m n \n.\m._-]
-' = (0 -)
* = \n.\m.[m n \n.\m._*]
/ = \n.\m.[m n \n.\m._/]
% = \n.\m.[m n \n.\m._%]

#Tuples
pair = \f.\s.\p.(p f s)

# Monads
>>= = \c.\f.\w.(c w f)
>> = \c.\f.\w.(c w \v.f)
return = \f.\s.\p.(p f s)

# Booleans
false = \t.\f.f
true = \t.\f.t
not = \a.(a false true)

# Lists
nil? = \l.(l true \h.\t.false)

# OS
mvb = \val.\addr.\w.[w addr val \a.\b.\w._@b]
pageSize = 4096
sys_mmap = \addr.\len.\prot.\flags.\fd.\offset.\w.[w offset fd flags prot len addr \a.\b.\c.\d.\e.\f.(\t.\w._!6 9)]
sys_write = \fd.\buf.\count.\w.[w count buf fd \a.\b.\c.(\t.\w._!3 1)]
write-utf8-char-to-buf = \c.\p.[
  (c <= 0x7f (>> (mvb c p) (return 1)))
  (c <= 0x7ff (>> (mvb (c / 0x40 + 0xc0) p) 
              (>> (mvb (c % 0x40 + 0x80) (p + 1)) (return 2))))
  (c <= 0xffff (>> (mvb (c / 0x1000 + 0xe0) p)
               (>> (mvb (c % 0x1000 / 0x40 + 0x80) (p + 1))
               (>> (mvb (c % 0x40 + 0x80) (p + 2))
               (return 3)))))
  (>> (mvb '?' p) (return 1))]
malloc = \len.(sys_mmap 0 len 255 34 (-' 1) 0)
newPage = (malloc pageSize)
putStrBuf = \size.\buf.{
  putStrBuf = (Y \putStrBuf.\loc.\s.
  {finished = (return (pair loc s))}
  (s 
    finished 
    \h.\t.(loc - buf >= (size - 4) # This is to ensure the 4 byte unicode char can't be written
      finished 
      (>>= (write-utf8-char-to-buf h loc) \n.(putStrBuf (loc + n) t)))))
  }
  (putStrBuf buf)
writeFd = \fd.\str.(>>= newPage \iobuf.(Y \writeFd.\str.
  (>>= (putStrBuf pageSize iobuf str) \p.(p \p.\s.
  (>>= (sys_write fd iobuf (p - iobuf)) \n.
  (nil? s (return n) (writeFd s))))
) str))
putStrLn = \s.(>> (writeFd 1 s) (writeFd 1 "\n"))
print = putStrLn

main = (print "Hello world\n")
