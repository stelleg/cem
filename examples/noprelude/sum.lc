+ = \n.\m.[m n \n.\m._+]
* = \n.\m.[m n \n.\m._*]
- = \n.\m.[m n \n.\m._-]
<= = \n.\m.\t.\f.[m n \n.\m._<=]
nil = \n.\c.n
cons = \h.\t.\n.\c.(c h t)
Y = \g.(\x.[g x x] \x.[g x x])
foldr = (Y \foldr.\f.\a.\bs.(bs a \b.\bs.(f b (foldr f a bs))))
take = (Y \take.\n.\xs.(xs nil \x.\xs.(n <= 0 nil (cons x (take (n - 1) xs)))))
iterate = (Y \iterate.\f.\x.(cons x (iterate f (f x))))
from = (iterate (+ 1))
range = \s.\e.(take (e - s + 1) (from s))
sum = (foldr + 0)
prod = (foldr * 1)
sys_exit = \code.\w.[w 60 code \a.\t.\w._!1]
main = [sys_exit sum (range 1) 10]
