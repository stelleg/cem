# getdents system call
getdents = \fd.\dirent.\count.[fd dirent count 78 !3]
ls = \dirname.{dirents = (newPage 1)} (open dirname \fd.([print showInt fd] \n.(getdents fd dirents pageSize 
  \e.([e 0 /=] (error (printf "ls failed: %d" e)) (readStrBuf [dirents 24 +] pageSize)))))

# pipe system call
sys_pipe = \fdes.[fdes 22 !1]
pipe = \w.{fdes = (newPage w)} (sys_pipe fdes \n.[(rdl fdes) [rdl fdes 4 +] Pair])

# Shell takes a line and executes it after splitting it into words
shell = \line.(words line nil \cmd.\args.(fork nil (0 =)
  [(exec cmd args getEnv) then (error "command not found")]
  (wait 0)))

# Looks for the command in the PATH environment
envMap = (map (split \c.[c '=' =]) getEnv)
paths = (lookup "PATH" strcmp envMap "path not found!" (splitWhen \c.[c ':' =]))

# Extracts all possible commands using ls output
commands = (mapm \c.[shell (append "/usr/bin/ls ") c] paths)

# Quits on ctrl-d (eof), otherwise returns the line
getLineOrQuit = \world.(takeWhile \c.[c '\n' /=] (readFd 0 world
  (error "goodbye")
  Cons))

# Loops forever on getLines and shells
main = (forever \world.[
  (putStr "> ") then 
  shell getLineOrQuit world
] initWorld)

main = {fdes = (newPage nil)}[
  (sys_pipe fdes) \k.\n.
  [(printf "n = %d" n) k] then \k.
  [(printf "in = %d" (rdl fdes)) k] then \k.
  [(printf "out = %d" [rdl fdes 4 +]) k] then 
  (mapm print commands) 
#  (print (ls "/usr/bin"))
]
