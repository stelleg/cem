# Recursion!
Y = \g.(\x.[g x x] \x.[g x x])

# Boolean integer comparisons
= = \n.\m.\t.\f.[m n \n.\m._=]
!= = \n.\m.\t.\f.[m n \n.\m._\=]
>= = \n.\m.\t.\f.[m n \n.\m._>=]
<= = \n.\m.\t.\f.[m n \n.\m._<=]
< = \n.\m.\t.\f.[m n \n.\m._<]
> = \n.\m.\t.\f.[m n \n.\m._>]

# Arithmetic
+ = \n.\m.[m n \n.\m._+]
- = \n.\m.[m n \n.\m._-]
-' = (0 -)
* = \n.\m.[m n \n.\m._*]
/ = \n.\m.[m n \n.\m._/]
% = \n.\m.[m n \n.\m._%]
^ = \n.(Y \^.\l.\n*.\m.(m = 0 n* (^ (n * n*) (m - 1))) n 1)

# Booleans
false = \t.\f.f
true = \t.\f.t
and = \a.\b.(a b false)
or = \a.\b.(a true b)
not = \a.(a false true)

# Maybe
Nothing = \n.\j.n
Just = \a.\n.\j.(j a)

# Either 
Left = \v.\l.\r.(l v)
Right = \v.\l.\r.(r v)

# Lists
cons = \h.\t.\n.\c.(c h t)
: = cons
nil = true
; = nil
nil? = \l.(l true \h.\t.false)

# Tuple
pair = \f.\s.\p.(p f s)

# Monad
>>= = \c.\f.\w.(c w f)
>> = \c.\f.\w.(c w \v.f)
return = pair

# Random functions
gcd = (Y \gcd.\a.\b.([b 0 =] a (gcd b [a b %])))
lcm = \a.\b.(a * b / (gcd a b))
even = \n.(n % 2 = 0)
odd = \n.(n % 2 = 1)
id = \x.x
const = true
compose = \f.\g.\x.[f g x]
flip = \f.\b.\a.(f a b)
until = (Y \until.\p.\f.\x.(p x x (until p f (f x)))) 
map = (Y \map.\f.\xs.(xs nil \h.\t.(cons (f h) (map f t))))
null = nil? 
length = \xs.(Y \length.\xs.\acc.(xs acc \h.\t.(length t (acc + 1))) xs 0)
foldl = (Y \foldl.\f.\a.\bs.(bs a \b.\bs.(foldl f (f a b) bs)))
foldr = (Y \foldr.\f.\a.\bs.(bs a \b.\bs.(f b (foldr f a bs))))
append = \as.\bs.(foldr cons bs as)
++ = append
reverse = (foldl (flip cons) nil) 
any = \p.\xs.(foldr or false (map p xs))
all = \p.\xs.(foldr and true (map p xs))
concat = (foldr append nil)
concatMap = \f.(foldr (compose append f) nil)
filter = \c.(Y \filter.\ls.(ls nil \h.\t.(c h (cons h) id (filter t))))
scanl = (Y \scanl.\f.\q.\ls.(cons q (ls nil \x.\xs.(scanl f (f q x) xs))))
scanr = (Y \scanr.\f.\q.\ls.(cons q (ls (cons q nil) \x.\xs.(scanr f x q nil \q.\qs.(cons (f x q))))))
iterate = (Y \iterate.\f.\x.(cons x (iterate f (f x))))
repeat = (iterate id)
take = (Y \take.\n.\xs.(xs ; \x.\xs.(n <= 0 ; (: x (take (n - 1) xs)))))
replicate = \n.\x.(take n (repeat x))
cycle = \xs.[concat repeat xs]
drop = (Y \drop.\n.\xs.(xs ; \x.\xs.(n = 1 xs (drop (n - 1) xs))))
tail = (drop 1)
splitAt = \n.\xs.(pair (take n xs) (drop n xs))
takeWhile = (Y \takeWhile.\f.\xs.(xs nil \x.\xs.(f x (cons x (takeWhile f xs)) nil)))
dropWhile = (Y \dropWhile.\f.\xs.(xs nil \x.\xs.(f x (dropWhile f xs) (cons x xs))))
splitHalf = (Y \sh.\xs.(xs (pair ; ;) \h1.\t1.(t1 (pair (: h1 ;) ;) \h2.\t2.
  {tails = (sh t2)} (tails \f.\s.(
  (pair (: h1 f) (: h2 s)))))))
sort = \f.{merge = (Y \merge.\xs.\ys.(xs ys \x.\xts.(ys xs \y.\yts.(f x y 
             (: x (merge xts ys)) (: y (merge xs yts))))))}
  (Y \ms.\l.(length l < 2 l (splitHalf l \f.\s.(merge (ms f) (ms s)))))
split = \f.(Y \split.\xs.(xs (pair nil nil) \h.\t.(f h 
  (pair nil t)
  (split t \acc.\rem.(pair (cons h acc) rem)))))
showInt = \i.{showPosInt = (compose reverse (Y \showPosInt.\i.(i = 0
    nil 
    (cons (i % 10 + 48) (showPosInt (i / 10))))))} [
  (i = 0 "0") 
  (i < 0 (cons '-' (showPosInt (0 - i))))
  (showPosInt i)
]
readInt = (compose (Y \readInt.\n.(n 0 \h.\t.(h - 48 + (readInt t * 10))))
  (compose reverse (takeWhile \h.(and (h >= 48) (h < 58)))))
showBool = \b.(b "true" "false")
forever = \c.(Y \forever.(>> c forever))
isSpace = \c.(any (= c) " \n\t\r")
partition = \f.(Y \partition.\s.\acc.(s (pair acc nil) \h.\t.(f h (pair acc s)
    (partition t (append acc))))) 
splitWhen = \f.(Y \splitWhen.\xs.(split f xs \l.\r.(r 
  (l ; \h.\t.(: l ;))
  \h.\t.{cont = (splitWhen r)}(l cont \h.\t.(: l cont)))))
words = (splitWhen isSpace)
lines = (splitWhen (= '\n'))
intersperse = \v.(Y \intersperse.\l.(l l \h.\t.(t l 
  \h'.\t'.[(: h) (: v) intersperse t])))
unwords = (compose concat (intersperse " "))
if = id
from = (iterate (+ 1))
range = \s.\e.(take (e - s + 1) (from s))
then = \cont.\result.cont
sum = (foldr + 0)
max = \x.\y.(x > y x y)
min = \x.\y.(x < y x y)
unlines = (concatMap (flip append "\n"))
apply = (Y \al.\f.\l.(l f \h.\t.(al (f h) t))) 
signum = \n.(n = 0 0 (n > 0 1 (-' 1)))
abs = \n.(n < 0 (0 - n) n)
zipWith = \f.(Y \zipWith.\as.\bs.(as nil \a.\at.(bs nil \b.\bt.
  (: (f a b) (zipWith at bt)))))
zip = (zipWith pair)
for = \as.\f.(Y \for.\as.(as (return id) \a.\as.(>> (f a) (for as))) as)
mapm_ = (flip for)
mapm = \f.\as.(Y \mapm.\as.\acc.(as (return acc) \a.\as.(>>= (f a) \c.(mapm as (cons c acc)))) as nil)
replace = \l.\v.(map (const v) l)
zip-with-default = \f.\d.(Y \zwd.\as.\bs.(as 
  (replace bs d)
  \a.\at.(bs 
    (replace as d)
    \b.\bt.(: (f a b) (zwd at bt)))))
strcmp = \s1.\s2.(all id (zip-with-default = false s1 s2))
lookup = \elem.\eqfun.(Y \lookup.\l.(l 
  Nothing 
  \h.\t.(h \key.\value.(eqfun elem key
    (Just value)
    (lookup t)))))
elem = \val.\list.(lookup val list false true)

# Fun unicode synonyms
âˆ˜ = compose
